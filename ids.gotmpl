{{ define "ids.gotmpl" }}package {{ .Package }}

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"
	"time"
)
{{ range .IDs }}
const {{ .Name }}IDPrefix = "{{ .Prefix }}"{{ end }}
{{ range .IDs }}
func new{{ .Name }}ID() string {
	return fmt.Sprintf("%s%s", {{ .Name }}IDPrefix, generateCode())
}
{{ end }}
func generateCode() string {
	s := getSequenceNumber()
	t := getSecondsSinceEpoch()
	m := getMachineID()
	hex := fmt.Sprintf("%x%x%x", s, t, m)
	return hex
}

type Counter struct {
	mu sync.Mutex
	x  int
}

var counter = Counter{}

func getSequenceNumber() int {
	counter.mu.Lock()
	defer counter.mu.Unlock()
	counter.x = (counter.x + 1) % 4096
	return counter.x + 170
}

var customEpoch = time.Date({{ .Epoch.Year }}, time.{{ .Epoch.Month }}, {{ .Epoch.Day}}, 0, 0, 0, 0, time.UTC).Unix()

func getSecondsSinceEpoch() int64 {
	return time.Now().Unix() - customEpoch
}

func getMachineID() int {
	machineID := mustGetEnv("MACHINE_ID")
	i, err := strconv.Atoi(machineID)
	if err != nil {
		log.Fatalf("cannot parse machine id into int. (MACHINE_ID = %s) ", machineID)
	}
	return i
}

func mustGetEnv(key string) string {
	v, ok := os.LookupEnv(key)
	if !ok {
		log.Fatalf("%s environment key not found.\n", key)
	}
	return v
}
{{ end }}
